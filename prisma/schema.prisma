generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions Session[]
  accounts Account[]
  roadmaps UserRoadmap[]
  Roadmap  Roadmap[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

model Roadmap {
  id         String                       @id @default(cuid())
  userId     String?
  prompt     String                       @unique
  promptHash String                       @unique
  content    Json
  embedding  Unsupported("vector(1536)")?
  createdAt  DateTime                     @default(now())
  updatedAt  DateTime                     @updatedAt
  isPublic   Boolean                      @default(false)

  // Relations
  userRoadmaps UserRoadmap[]
  user         User?         @relation(fields: [userId], references: [id])

  @@map("roadmaps")
}

model UserRoadmap {
  id              String    @id @default(cuid())
  userId          String
  roadmapId       String
  progress        Json?
  currentStage    Int       @default(1)
  completedStages Int[]     @default([])
  quizScores      Json?
  chatHistory     Json?
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap Roadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId])
  @@map("user_roadmaps")
}
